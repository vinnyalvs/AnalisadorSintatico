prog:	'{' data '}' '{' func '}' ;
data:	data ID '{' '{' decl '}' '}' ;
decl:	ID '::' type ';' ;
func:	ID '(' '[' params ']' ')' '[':' type '(' ',' type ')'* ']' '{' '{' cmd '}' '}' ;
params:	ID '::' type '{' ',' ID '::' type '}' ;
type: type '[' ']'
    | btype 
btype:	INT
	|	CHAR
	|	BOOL
	|	FLOAT
	|	ID
;
cmd:	'{' '{' cmd '}' '}'
	|	IF '(' exp ')' cmd
	|	IF '(' exp ')' cmd ELSE cmd
	|	ITERATE '(' exp ')' cmd
	|	READ lvalue ';'
	|	PRINT exp ';'
	|	RETURN exp '{' ',' exp'}' ';'
	|	lvalue '=' exp ';'
	|	ID '(' '['exps']' ')' '[' '<' lvalue '{' ',' lvalue'}' '>' ']' ';'
;
exp:    exp && exp
    |   rexp 
;
rexp:	aexp '<' aexp
    |   rexp '==' aexp
    |   rexp '!=' aexp
    |   aexp
;
aexp:   aexp '+' mexp
    |   aexp '-' mexp
    |   mexp
;
mexp:	mexp '*'sexp
    |   mexp '\' sexp
    |   mexp '%' sexp
    |   sexp
;
sexp:	'!' sexp
	|	'-' sexp
	|	true
	|	false
	|	null
	|	INT
	|	FLOAT
	|	CHAR
	|	pexp
;
pexp:	lvalue
	|	'(' exp ')'
	|	'new' btype '[' '[' sexp ']' ']'
	|	ID '(' '[' exps ']' ')' '[' exp ']'
;
lvalue:	ID
	|	lvalue '[' exp ']'
	|	lvalue '.' ID
;
exps:	exp '{' ',' exp '}' ; 
